upstream app_one {
    server app_one:80;
}
 
upstream app_two {
    server app_two:80;
}
 
server {
       listen   8081;
       root     /opt/nginx/html;
       resolver 127.0.0.11  valid=1s  ipv6=off;
       
       access_by_lua '
         local opts = {
           redirect_uri_path = "/redirect_uri",
           accept_none_alg = true,
           discovery = "http://host.docker.internal:3333/realms/newrealm/.well-known/openid-configuration",
           client_id = "nginx_client_one",
           client_secret = "secret_insert",
           redirect_uri_scheme = "http",
           logout_path = "/logout",
           redirect_after_logout_uri = "http://host.docker.internal:3333/realms/newrealm/protocol/openid-connect/logout?redirect_uri=http://localhost/",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {id_token=true}
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
      ';
 
      expires           0;
      add_header        Cache-Control private;    
 
      location / {
          proxy_pass      http://app_one;
      }    

      error_page 404 /404.html;
          location = /40x.html {
      }
}
 
server {
       listen   8082;
       root     /opt/nginx/html;
       resolver 127.0.0.11  valid=1s  ipv6=off;
       
       access_by_lua '
         local opts = {
           redirect_uri_path = "/redirect_uri",
           accept_none_alg = true,
           discovery = "http://host.docker.internal:3333/realms/newrealm/.well-known/openid-configuration",
           client_id = "nginx_client_two",
           client_secret = "secret_insert",
           redirect_uri_scheme = "http",
           logout_path = "/logout",
           redirect_after_logout_uri = "http://host.docker.internal:3333/realms/newrealm/protocol/openid-connect/logout?redirect_uri=http://localhost/",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {access_token=true}
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
      ';
 
      expires           0;
      add_header        Cache-Control private;
      
      location / {
          proxy_pass    http://app_two;
      }
      
      error_page 404 /404.html;
          location = /40x.html {
      }
}